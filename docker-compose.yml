version: '3.8'

networks:
  logging-network:
    driver: bridge

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    networks:
      - logging-network
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=elastic1234
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  



  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    networks:
      - logging-network
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic1234
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  


  apm-server:
    image: docker.elastic.co/apm/apm-server:7.17.9
    networks:
      - logging-network
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
      - "8200:8200"
    depends_on:
      - elasticsearch
    command: >
      apm-server -e
        -E apm-server.host=:8200
        -E setup.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
        -E output.elasticsearch.username=elastic
        -E output.elasticsearch.password=elastic1234
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:8200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
 


  seq:
    image: datalust/seq:latest
    networks:
      - logging-network
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq-data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  


  loggingexample.web:
    build:
      context: .
      dockerfile: LoggingExample.Web/Dockerfile
    networks:
      - logging-network
    ports:
      - "5001:8080"
    depends_on:
      - elasticsearch
      - seq
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_URLS=http://+:8080
      - SeriLogConfig__ElasticUri=http://elasticsearch:9200
      - SeriLogConfig__ElasticUser=elastic
      - SeriLogConfig__ElasticPassword=elastic1234
      - ElasticApm__ServerUrls=http://apm-server:8200
      - ElasticApm__SecretToken=apmsecrettoken
      - Seq__ServerUrl=http://seq:5341
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:8080/api/health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s



  jaeger:
    image: jaegertracing/all-in-one:latest
    networks:
      - logging-network
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "4317:4317" # OTLP gRPC port
      - "4318:4318" # OTLP HTTP port
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  




  zookeeper:
    image: bitnami/zookeeper:latest
    networks:
      - logging-network
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOO_LOG_DIR: /var/log/zookeeper
      ZOO_LOG4J_PROP: INFO,ROLLINGFILE
      ZOO_LOG4J_LOG_DIR: /var/log/zookeeper
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  
  kafka:
    image: bitnami/kafka:latest
    networks:
     - logging-network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9092
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s


  akhd:
    image: tchiotludo/akhq
    networks:
      - logging-network
    ports:
      - "8080:8080"
    environment:
      - AKHQ_CONNECTIONS_KAFKA_CLUSTERS_0_NAME=local
      - AKHQ_CONNECTIONS_KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - AKHQ_CONNECTIONS_KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - AKHQ_SERVER_PORT=8080
      - AKHQ_SERVER_HOST=localhost
    volumes:
      - ./akhq/application.yml:/app/application.yml
    depends_on:
      - kafka
      - zookeeper
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


    
    



volumes:
  elasticsearch-data:
  seq-data: